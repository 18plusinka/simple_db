#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
SQLite –±–∞–∑–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import sqlite3
import json
from datetime import datetime

class SimpleDB:
    def __init__(self, db_name="simple.db"):
        self.db_name = db_name
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_name) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS records (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    content TEXT,
                    category TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            conn.commit()
    
    def add_record(self, title, content="", category="–æ–±—â–µ–µ"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å"""
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.execute(
                "INSERT INTO records (title, content, category) VALUES (?, ?, ?)",
                (title, content, category)
            )
            conn.commit()
            return cursor.lastrowid
    
    def get_records(self, category=None, search=None, limit=50):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        query = "SELECT * FROM records WHERE 1=1"
        params = []
        
        if category:
            query += " AND category = ?"
            params.append(category)
        
        if search:
            query += " AND (title LIKE ? OR content LIKE ?)"
            params.extend([f"%{search}%", f"%{search}%"])
        
        query += " ORDER BY created_at DESC LIMIT ?"
        params.append(limit)
        
        with sqlite3.connect(self.db_name) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute(query, params)
            return [dict(row) for row in cursor.fetchall()]
    
    def get_record(self, record_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID"""
        with sqlite3.connect(self.db_name) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("SELECT * FROM records WHERE id = ?", (record_id,))
            row = cursor.fetchone()
            return dict(row) if row else None
    
    def update_record(self, record_id, title=None, content=None, category=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å"""
        updates = []
        params = []
        
        if title is not None:
            updates.append("title = ?")
            params.append(title)
        if content is not None:
            updates.append("content = ?")
            params.append(content)
        if category is not None:
            updates.append("category = ?")
            params.append(category)
        
        if not updates:
            return False
        
        params.append(record_id)
        query = f"UPDATE records SET {', '.join(updates)} WHERE id = ?"
        
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.execute(query, params)
            conn.commit()
            return cursor.rowcount > 0
    
    def delete_record(self, record_id):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å"""
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.execute("DELETE FROM records WHERE id = ?", (record_id,))
            conn.commit()
            return cursor.rowcount > 0
    
    def get_categories(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.execute("SELECT DISTINCT category FROM records ORDER BY category")
            return [row[0] for row in cursor.fetchall()]
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã"""
        with sqlite3.connect(self.db_name) as conn:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            total = conn.execute("SELECT COUNT(*) FROM records").fetchone()[0]
            
            # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cursor = conn.execute("SELECT category, COUNT(*) FROM records GROUP BY category")
            categories = dict(cursor.fetchall())
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            cursor = conn.execute("SELECT DATE(created_at) as date, COUNT(*) FROM records GROUP BY DATE(created_at) ORDER BY date DESC LIMIT 7")
            recent_activity = dict(cursor.fetchall())
            
            return {
                'total_records': total,
                'categories': categories,
                'recent_activity': recent_activity
            }
    
    def export_json(self, filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON"""
        records = self.get_records(limit=10000)  # –í—Å–µ –∑–∞–ø–∏—Å–∏
        
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"export_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(records, f, ensure_ascii=False, indent=2, default=str)
        
        return filename
    
    def import_json(self, filename):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                records = json.load(f)
            
            imported_count = 0
            for record in records:
                if 'title' in record:
                    self.add_record(
                        title=record['title'],
                        content=record.get('content', ''),
                        category=record.get('category', '–∏–º–ø–æ—Ä—Ç')
                    )
                    imported_count += 1
            
            return imported_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return 0

def main():
    db = SimpleDB()
    print("=== –ü–†–û–°–¢–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ===\n")
    
    while True:
        print("1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏")
        print("3. –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏")
        print("4. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å")
        print("5. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
        print("6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("7. –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON")
        print("8. –ò–º–ø–æ—Ä—Ç –∏–∑ JSON")
        print("9. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
        
        if choice == "1":
            title = input("–ó–∞–≥–æ–ª–æ–≤–æ–∫: ").strip()
            if not title:
                print("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
                continue
            
            content = input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
            
            categories = db.get_categories()
            if categories:
                print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
            
            category = input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–æ–±—â–µ–µ'): ").strip() or "–æ–±—â–µ–µ"
            
            record_id = db.add_record(title, content, category)
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {record_id}")
        
        elif choice == "2":
            categories = db.get_categories()
            if categories:
                print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
                category_filter = input("–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ Enter –¥–ª—è –≤—Å–µ—Ö): ").strip()
                category_filter = category_filter if category_filter else None
            else:
                category_filter = None
            
            records = db.get_records(category=category_filter)
            
            if records:
                print(f"\nüìã –ó–ê–ü–ò–°–ò ({len(records)})")
                print("=" * 60)
                for record in records:
                    created = record['created_at'][:19]  # –ë–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
                    print(f"ID: {record['id']} | {record['category'].upper()}")
                    print(f"üìù {record['title']}")
                    if record['content']:
                        content_preview = record['content'][:80] + "..." if len(record['content']) > 80 else record['content']
                        print(f"   {content_preview}")
                    print(f"   üïí {created}")
                    print("-" * 40)
            else:
                print("–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        elif choice == "3":
            search_term = input("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
            if search_term:
                records = db.get_records(search=search_term)
                
                if records:
                    print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê ({len(records)})")
                    print("=" * 60)
                    for record in records:
                        print(f"ID: {record['id']} | {record['title']}")
                        if record['content']:
                            print(f"   {record['content'][:100]}...")
                        print("-" * 30)
                else:
                    print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        elif choice == "4":
            try:
                record_id = int(input("ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "))
                record = db.get_record(record_id)
                
                if record:
                    print(f"\n–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å:")
                    print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {record['title']}")
                    print(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {record['content']}")
                    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {record['category']}")
                    
                    new_title = input(f"–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (Enter –¥–ª—è '{record['title']}'): ").strip()
                    new_content = input(f"–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è): ").strip()
                    new_category = input(f"–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (Enter –¥–ª—è '{record['category']}'): ").strip()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                    title = new_title if new_title else None
                    content = new_content if new_content != "" else None
                    category = new_category if new_category else None
                    
                    if db.update_record(record_id, title, content, category):
                        print("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    else:
                        print("‚ùå –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å")
                else:
                    print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        
        elif choice == "5":
            try:
                record_id = int(input("ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
                record = db.get_record(record_id)
                
                if record:
                    print(f"–ó–∞–ø–∏—Å—å: {record['title']}")
                    confirm = input("–£–¥–∞–ª–∏—Ç—å? (y/N): ").lower()
                    
                    if confirm == 'y':
                        if db.delete_record(record_id):
                            print("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
                        else:
                            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                    else:
                        print("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                else:
                    print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        
        elif choice == "6":
            stats = db.get_stats()
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´")
            print("=" * 30)
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']}")
            
            if stats['categories']:
                print(f"\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                for category, count in stats['categories'].items():
                    print(f"  {category}: {count}")
            
            if stats['recent_activity']:
                print(f"\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:")
                for date, count in list(stats['recent_activity'].items())[:5]:
                    print(f"  {date}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        elif choice == "7":
            filename = input("–ò–º—è —Ñ–∞–π–ª–∞ (–∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ): ").strip()
            filename = filename if filename else None
            
            exported_file = db.export_json(filename)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {exported_file}")
        
        elif choice == "8":
            filename = input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ").strip()
            if filename:
                imported_count = db.import_json(filename)
                if imported_count > 0:
                    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {imported_count}")
                else:
                    print("‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è")
            else:
                print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª")
        
        elif choice == "9":
            break
            
        print("\n" + "="*50 + "\n")

if __name__ == "__main__":
    main()
